<?xml version="1.0" ?>
<robot name="demo_imm" xmlns:xacro="http://www.ros.org/wiki/xacro" xmlns:gz="http://gazebosim.org/schema">

  <xacro:macro name="demo_imm" params="prefix package initial_positions_file ros2_control_param_file *origin gz:=false">
    <xacro:property name="M_PI" value="3.14159" />
    <xacro:include filename="$(find ${package})/urdf/base_omni.xacro" />

    <xacro:omnibase prefix="${prefix}">
      <xacro:insert_block name="origin" />
    </xacro:omnibase>

    <ros2_control name="${prefix}omnibase" type="system">
      <hardware>
        <plugin>mock_components/GenericSystem</plugin>
      </hardware>
      <joint name="${prefix}front_left_wheel_joint">
        <command_interface name="velocity"/>
        <state_interface name="velocity"/>
        <state_interface name="position">
          <param name="initial_value">0</param>
        </state_interface>
      </joint>
      <joint name="${prefix}front_right_wheel_joint">
        <command_interface name="velocity"/>
        <state_interface name="velocity"/>
        <state_interface name="position">
          <param name="initial_value">0</param>
        </state_interface>
      </joint>
      <joint name="${prefix}rear_left_wheel_joint">
        <command_interface name="velocity"/>
        <state_interface name="velocity"/>
        <state_interface name="position">
          <param name="initial_value">0</param>
        </state_interface>
      </joint>
      <joint name="${prefix}rear_right_wheel_joint">
        <command_interface name="velocity"/>
        <state_interface name="velocity"/>
        <state_interface name="position">
          <param name="initial_value">0</param>
        </state_interface>
      </joint>
    </ros2_control>

    <xacro:property name="ur_type" value="ur10" />
    <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro" />
    <xacro:property name="joint_limit_params" value="$(find ur_description)/config/${ur_type}/joint_limits.yaml" />
    <xacro:property name="kinematics_params" value="$(find ur_description)/config/${ur_type}/default_kinematics.yaml" />
    <xacro:property name="physical_params" value="$(find ur_description)/config/${ur_type}/physical_parameters.yaml" />
    <xacro:property name="visual_params" value="$(find ur_description)/config/${ur_type}/visual_parameters.yaml" />
    <xacro:property name="initial_positions" value="${xacro.load_yaml(initial_positions_file)}" />
    <xacro:property name="generate_ros2_control_tag" value="false" />
    <xacro:ur_robot
      name="${prefix}demo_imm"
      tf_prefix="${prefix}"
      parent="${prefix}base_footprint"
      joint_limits_parameters_file="${joint_limit_params}"
      kinematics_parameters_file="${kinematics_params}"
      physical_parameters_file="${physical_params}"
      visual_parameters_file="${visual_params}"
      safety_limits="false"
      safety_pos_margin="0.15"
      safety_k_position="20"
      initial_positions="${initial_positions}"
      generate_ros2_control_tag="${generate_ros2_control_tag}"
    >
      <origin xyz="0 0 ${0.25}" rpy="0 0 0" />
    </xacro:ur_robot>

    <!-- ros2_control custom tag-->
    <ros2_control name="${prefix}ur_control" type="system">
      <xacro:if value="${gz}">
        <hardware>
          <plugin>gz_ros2_control/GazeboSimSystem</plugin>
        </hardware>
      </xacro:if>
      <xacro:unless value="${gz}">
        <hardware>
          <plugin>mock_components/GenericSystem</plugin>
        </hardware>
      </xacro:unless>
      <joint name="${prefix}shoulder_pan_joint">
        <command_interface name="position" />
        <command_interface name="velocity" />
        <state_interface name="position">
          <!-- initial position for the FakeSystem and simulation -->
          <param name="initial_value">${initial_positions['shoulder_pan_joint']}</param>
        </state_interface>
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="${prefix}shoulder_lift_joint">
        <command_interface name="position" />
        <command_interface name="velocity" />
        <state_interface name="position">
          <!-- initial position for the FakeSystem and simulation -->
          <param name="initial_value">${initial_positions['shoulder_lift_joint']}</param>
        </state_interface>
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="${prefix}elbow_joint">
        <command_interface name="position" />
        <command_interface name="velocity" />
        <state_interface name="position">
          <!-- initial position for the FakeSystem and simulation -->
          <param name="initial_value">${initial_positions['elbow_joint']}</param>
        </state_interface>
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="${prefix}wrist_1_joint">
        <command_interface name="position" />
        <command_interface name="velocity" />
        <state_interface name="position">
          <!-- initial position for the FakeSystem and simulation -->
          <param name="initial_value">${initial_positions['wrist_1_joint']}</param>
        </state_interface>
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="${prefix}wrist_2_joint">
        <command_interface name="position" />
        <command_interface name="velocity" />
        <state_interface name="position">
          <!-- initial position for the FakeSystem and simulation -->
          <param name="initial_value">${initial_positions['wrist_2_joint']}</param>
        </state_interface>
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
      <joint name="${prefix}wrist_3_joint">
        <command_interface name="position" />
        <command_interface name="velocity" />
        <state_interface name="position">
          <!-- initial position for the FakeSystem and simulation -->
          <param name="initial_value">${initial_positions['wrist_3_joint']}</param>
        </state_interface>
        <state_interface name="velocity" />
        <state_interface name="effort" />
      </joint>
    </ros2_control>

    <gazebo>
      <plugin filename="libgz_ros2_control-system.so" name="gz_ros2_control::GazeboSimROS2ControlPlugin">
        <ros>
          <namespace>${prefix[0:-1]}</namespace>
        </ros>
        <robot_param>robot_description</robot_param>
        <robot_param_node>robot_state_publisher</robot_param_node>
        <parameters>${ros2_control_param_file}</parameters>
      </plugin>
    </gazebo>
  </xacro:macro>
</robot>
